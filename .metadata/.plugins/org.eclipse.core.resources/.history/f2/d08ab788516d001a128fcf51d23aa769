package pt.ulisboa.tecnico.learnjava.sibs.sibs;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import State.Cancelled;
import State.Completed;
import State.Deposited;
import State.Registered;
import State.Withdrawn;
import pt.ulisboa.tecnico.learnjava.bank.domain.Bank;
import pt.ulisboa.tecnico.learnjava.bank.domain.Client;
import pt.ulisboa.tecnico.learnjava.bank.domain.Person;
import pt.ulisboa.tecnico.learnjava.bank.exceptions.AccountException;
import pt.ulisboa.tecnico.learnjava.bank.exceptions.BankException;
import pt.ulisboa.tecnico.learnjava.bank.exceptions.ClientException;
import pt.ulisboa.tecnico.learnjava.bank.exceptions.PersonException;
import pt.ulisboa.tecnico.learnjava.bank.services.Services;
import pt.ulisboa.tecnico.learnjava.sibs.domain.Operation;
import pt.ulisboa.tecnico.learnjava.sibs.domain.Sibs;
import pt.ulisboa.tecnico.learnjava.sibs.domain.TransferOperation;
import pt.ulisboa.tecnico.learnjava.sibs.exceptions.OperationException;
import pt.ulisboa.tecnico.learnjava.sibs.exceptions.SibsException;

public class CancelOperationMethodTest {
	
	private static final String ADDRESS = "Ave.";
	private static final String PHONE_NUMBER = "987654321";
	private static final String NIF = "123456789";
	private static final String LAST_NAME = "Silva";
	private static final String FIRST_NAME = "Ant√≥nio";

	private Sibs sibs;
	private Bank sourceBank;
	private Bank targetBank;
	private Person person;
	private Client sourceClient;
	private Client targetClient;
	private Client targetClientSameBank;
	private String sourceIban;
	private String targetIban;
	private String targetIbanSameBank;
	private Services services;
	
	@Before
	public void setUp() throws BankException, AccountException, ClientException, PersonException, SibsException, OperationException {
		this.services = new Services();
		this.sibs = new Sibs(100, services);
		this.sourceBank = new Bank("CGD");
		this.targetBank = new Bank("BPI");
		this.person = new Person( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NUMBER);
		this.sourceClient = new Client(this.sourceBank, this.person, NIF, 33);
		this.targetClient = new Client(this.targetBank, this.person, "222222222", 22);
		this.targetClientSameBank = new Client(this.sourceBank, this.person,"222222222", 22);
		this.sourceIban = this.sourceBank.createAccount(Bank.AccountType.CHECKING, this.sourceClient, 1000, 0); 
		this.targetIban = this.targetBank.createAccount(Bank.AccountType.CHECKING, this.targetClient, 1000, 0);
		this.targetIbanSameBank = this.sourceBank.createAccount(Bank.AccountType.CHECKING, this.targetClientSameBank, 1000, 0);
	}
	
	@Test
	public void success() throws BankException, AccountException, SibsException, OperationException, ClientException {
		
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		
		this.sibs.processOperations();
		
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		
		this.sibs.cancelOperations(1);
		
		TransferOperation operation1 = (TransferOperation) this.sibs.getOperation(0);
		TransferOperation operation2 = (TransferOperation) this.sibs.getOperation(1);
		TransferOperation operation3 = (TransferOperation) this.sibs.getOperation(2);
		
		assertTrue(operation1.getState() instanceof Withdrawn);
		assertTrue(operation2.getState() instanceof Cancelled);
		assertTrue(operation3.getState() instanceof Registered);
		assertEquals(3, this.sibs.getNumberOfOperations());
		assertEquals(900, this.services.getAccountByIban(this.sourceIban).getBalance());
		assertEquals(1000, this.services.getAccountByIban(this.targetIbanSameBank).getBalance());
		assertEquals(300, this.sibs.getTotalValueOfOperations());
		assertEquals(300, this.sibs.getTotalValueOfOperationsForType(Operation.OPERATION_TRANSFER));
		assertEquals(0, this.sibs.getTotalValueOfOperationsForType(Operation.OPERATION_PAYMENT));	
	}
	
	@Test
	public void sucessRegisteredCancelled() throws SibsException, AccountException, OperationException {
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		this.sibs.cancelOperations(0);
		this.sibs.processOperations();
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		this.sibs.processOperations();
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		this.sibs.processOperations();
		
		TransferOperation operation1 = (TransferOperation) this.sibs.getOperation(0);
		TransferOperation operation2 = (TransferOperation) this.sibs.getOperation(1);
		TransferOperation operation3 = (TransferOperation) this.sibs.getOperation(2);
		
		assertTrue(operation1.getState() instanceof Cancelled);
		assertTrue(operation2.getState() instanceof Deposited);
		assertTrue(operation3.getState() instanceof Withdrawn);
		
		assertEquals(3, this.sibs.getNumberOfOperations());
		assertEquals(800, this.services.getAccountByIban(this.sourceIban).getBalance());
		assertEquals(1100, this.services.getAccountByIban(this.targetIban).getBalance());
		assertEquals(300, this.sibs.getTotalValueOfOperationsForType(Operation.OPERATION_TRANSFER));
	}
	
	@Test
	public void sucessWithdrawnCancelled() throws SibsException, AccountException, OperationException {
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		this.sibs.cancelOperations(0);
		this.sibs.processOperations();
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		this.sibs.processOperations();
		this.sibs.transfer(this.sourceIban, this.targetIban, 100);
		this.sibs.processOperations();
		
		TransferOperation operation1 = (TransferOperation) this.sibs.getOperation(0);
		TransferOperation operation2 = (TransferOperation) this.sibs.getOperation(1);
		TransferOperation operation3 = (TransferOperation) this.sibs.getOperation(2);
		
		assertTrue(operation1.getState() instanceof Cancelled);
		assertTrue(operation2.getState() instanceof Deposited);
		assertTrue(operation3.getState() instanceof Withdrawn);
		
		assertEquals(3, this.sibs.getNumberOfOperations());
		assertEquals(800, this.services.getAccountByIban(this.sourceIban).getBalance());
		assertEquals(1100, this.services.getAccountByIban(this.targetIban).getBalance());
		assertEquals(300, this.sibs.getTotalValueOfOperationsForType(Operation.OPERATION_TRANSFER));
	}
	
	
	@After
	public void tearDown() {
		Bank.clearBanks();
	}

}
